#
# Copyright 1&1 Internet AG, http://www.1and1.org
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


/*

 CCS 2.1 grammar from http://www.w3.org/TR/CSS2/grammar.html.

 Manual fixes:
 * in "media_list" rule: changed "COMMA" to ","
 * removed BAD_STRING and BAD_URI rules (with sub-rules) because Mork has no feature to report them as errors
 * removed BAD_COMMENT because Mork has no feature to accept it at EOF
 * various helper symbols (starting with_) added to add semantics
 * additional symbols for sass end with _
*/

[PARSER]
   resolve element_name when "{" <> property when ";", "}" ;



     stylesheet ::= ( CHARSET_SYM STRING ";" )? (S|CDO|CDC)*
                    ( imprt ( CDO S* | CDC S* )* )*
                    ( (ruleset | media | page | variable_) (CDO S* | CDC S*)* )* ;
          imprt ::= IMPORT_SYM S* (STRING|URI) S* media_list? ";" S* ;
          media ::= MEDIA_SYM S* media_list "{" S* ruleset* "}" S* ;
     media_list ::= medium ( "," S* medium )* ;
         medium ::= IDENT S* ;
           page ::= PAGE_SYM S* pseudo_page? "{" S* declaration? ( ";" S* declaration? )* "}" S* ;
    pseudo_page ::= ":" IDENT S* ;
       operator ::= _slash | _comma ;
         _slash ::= "/" S* ;
         _comma ::= "," S* ;
     combinator ::= _plus | _gt ;
          _plus ::= "+" S* ;
            _gt ::= ">" S* ;
 unary_operator ::= _unary_minus | _unary_plus ;
    _unary_plus ::= "+" ;
   _unary_minus ::= "-" ;
       property ::= IDENT ;
        ruleset ::= selector ( "," S* selector )* "{" S* nested_declaration_? ( ";" S* nested_declaration_? )* "}" S* ;
       selector ::= simple_selector ( combinator selector | S+ ( combinator? selector )? )? ;
simple_selector ::= element_name ( _hash | class | attrib | pseudo )*
                  | ( _hash | class | attrib | pseudo )+ ;
          _hash ::= HASH ;
          class ::= "." IDENT ;
   element_name ::= IDENT | "*" ;
         attrib ::= "[" S* IDENT S* ( ( _eq | _includes | _dashmatch ) S* ( IDENT | STRING ) S* )? "]" ;
            _eq ::= "=" ;
      _includes ::= INCLUDES ;
     _dashmatch ::= DASHMATCH ;
         pseudo ::= ":" ( _pseudo1 | _pseudo2 ) ;
       _pseudo1 ::= IDENT ;
       _pseudo2 ::= FUNCTION S* (IDENT S*)? ")" ;
nested_declaration_ ::= declaration | ruleset ;
    declaration ::= property S* ":" S* expr prio? ;
           prio ::= IMPORTANT_SYM S* ;
           expr ::= term ( operator? term )* ;
           term ::= _term1 | _term2 ;
         _term1 ::= unary_operator? ( _number S* | _percentage S* | _length S* | _ems S* | _exs S* | _angle S* | _time S* | _freq S* | reference_ S* );
         _term2 ::= _string S* | _ident S* | _uri S* | hexcolor | function ;
        _number ::= NUMBER ;
    _percentage ::= PERCENTAGE ;
        _length ::= LENGTH ;
           _ems ::= EMS ;
           _exs ::= EXS ;
         _angle ::= ANGLE ;
          _time ::= TIME ;
          _freq ::= FREQ ;
        _string ::= STRING ;
         _ident ::= IDENT ;
           _uri ::= URI ;
       function ::= FUNCTION S* expr ")" S* ;
       hexcolor ::= HASH S* ;

# sass addtions

      variable_ ::= "$" IDENT S* ":" S* expr ";" S*;
     reference_ ::= "$" IDENT ;


[SCANNER]
    white = comment ;

              S ::= s;
            CDO ::= "<!--";
            CDC ::= "-->";
       INCLUDES ::= "~=";
      DASHMATCH ::= "|=";
         STRING ::= string;
          IDENT ::= ident;
           HASH ::= "#" name;

     IMPORT_SYM ::= "@import";
       PAGE_SYM ::= "@page";
      MEDIA_SYM ::= "@media";
    CHARSET_SYM ::= "@charset ";
  IMPORTANT_SYM ::= "!" (w | comment)* "important" ;
            EMS ::= num "em";
            EXS ::= num "ex";
         LENGTH ::= num ("px" | "cm" | "mm" | "in" | "pt" | "pc");
          ANGLE ::= num ("deg" | "rad" | "grad");
           TIME ::= num ("ms" | "s");
           FREQ ::= num ("hz" | "khz");
    # TODO: not used:
    # DIMENSION ::= num ident;
     PERCENTAGE ::= num "%";
         NUMBER ::= num;

            URI ::= "url(" w string w ")";
            URI ::= "url(" w url w ")";
       FUNCTION ::= ident "(";

              h ::= 'A'..'Z' | 'a'..'z' | '0' .. '9' ;
       nonascii ::= (160 .. 255);
        unicode ::= '\\' h h? h? h? h? h? ('\r' '\n' | ' ' | '\t' | '\r' | '\n' | '\f' )? ;
         escape ::= unicode | '\\' ('\r' | '\n' | '\f' | '0'..'9' | 'A'..'F' | 'a'..'f')! ;
        nmstart ::= ('_' | 'A' .. 'Z' | 'a'..'z' | nonascii | escape );
         nmchar ::= ('_' | 'A' .. 'Z' | 'a'..'z' | '0'..'9' | '-' | nonascii | escape );
        string1 ::= '"' (('\n' | '\r' | '\f' | '"')! | '\\' nl | escape)* '"';
        string2 ::= '\'' (('\n' | '\r' | '\f' | '\'')! | '\\' nl | escape)* '\'';
        comment ::= '/' '*' '*'!* '*'+ (('/' | '*')! '*'!* '*'+)* '/' ;
          ident ::= '-'? nmstart nmchar* ;
           name ::= nmchar+ ;
            num ::= ('0'..'9')+ | ('0'..'9')* '.' ('0'..'9')+;
         string ::= string1 | string2 ;

            url ::= ("!" | "#" | "$" | "%" | "&" | '*'..'~' | nonascii | escape )*;

              s ::= (' ' | '\t' | '\r' | '\n' | '\f')+ ;
              w ::= s? ;
             nl ::= '\n' | '\r' '\n' | '\r' | '\f' ;
