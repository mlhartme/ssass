#
# Copyright 1&1 Internet AG, http://www.1and1.org
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


/*

 Grammar according to http://www.w3.org/TR/2011/NOTE-css-2010-20110512/. This is a container spec,
 the following parts form the basis for this file:
 * http://www.w3.org/TR/CSS2/grammar.html
 * TODO: http://www.w3.org/TR/css3-selectors/#w3cselgrammar
 * http://www.w3.org/TR/css3-mediaqueries/#syntax
 * http://www.w3.org/TR/css3-namespace/#syntax

 Changes:
 * inlined keyword symbols like MEDIA_SYM or CHARSET_SYM
 * fixes
   * removed BAD_STRING and BAD_URI rules (with sub-rules) because Mork has no feature to report them as errors
   * removed BAD_COMMENT because Mork has no feature to accept it at EOF
   * removed DIMENSION because it's not used
 * various helper symbols (starting with _) added to add semantics
 * additional symbols for sass features, marked with a tailing _
   * variables (variable_, reference_)
   * nesting (ssass_declaration_, nested_property)
   * mixins (mixin_, include_)
 * conflict resolution
   * replaced S* with Sp? and S+ with Sp, where SP ::= s+
   * changed declaration to require Sp after ":". This is a language change, but resolves my conflicts
   * media_query: remove separate media_type symbols, because they conflict with media_expr
*/

[PARSER]
        stylesheet ::= ( "@charset " STRING ";" )? (Sp|CDO|CDC)*
                       ( imprt (Sp|CDO|CDC)* )*
                       ( namespace (Sp|CDO|CDC)* )*
                       ( (ruleset | media | page | variable_ | mixin_) (CDO Sp? | CDC Sp?)* )* ;
             imprt ::= "@import" Sp? (STRING|URI) Sp? media_query_list? ";" ;
         namespace ::= "@namespace" Sp? (IDENT Sp?)? (STRING|URI) Sp? ";" ;
             media ::= "@media" Sp? media_query_list? "{" Sp? ruleset* "}" Sp? ;
  media_query_list ::= media_query ( "," Sp? media_query )* ;
       media_query ::= ((media_only Sp? | media_not Sp?)? IDENT Sp?) ("and" Sp? media_expr)*
                     | media_expr ("and" Sp? media_expr)* ;
        media_only ::= "only";
         media_not ::= "not";
        media_expr ::= "(" Sp? IDENT Sp? (":" Sp? expr)? ")" Sp? ;
              page ::= "@page" Sp? pseudo_page? "{" Sp? ssass_declaration_? ( ";" Sp? ssass_declaration_? )* "}" Sp? ;
       pseudo_page ::= ":" IDENT Sp? ;
         variable_ ::= "$" IDENT Sp? ":" Sp? expr ";" Sp?;
            mixin_ ::= "@mixin" Sp? IDENT Sp? mixin_args_? Sp? "{" Sp? ssass_declaration_? ( ";" Sp? ssass_declaration_? )* "}" Sp?;
       mixin_args_ ::= "(" Sp? "$" IDENT Sp? ("," Sp? "$" IDENT )* Sp? ")";
           ruleset ::= selectors_group "{" Sp? ssass_declaration_? ( ";" Sp? ssass_declaration_? )* "}" Sp? ;
   selectors_group ::= selector ( "," Sp? selector )* ;
          selector ::= simple_selector_sequence ( combinator selector | Sp ( combinator? selector )? )? ;
        combinator ::= _plus | _gt ;
             _plus ::= "+" Sp? ;
               _gt ::= ">" Sp? ;
   simple_selector_sequence ::= ( type_selector | universal ) ( _hash | class | attrib | pseudo )*
                     | ( _hash | class | attrib | pseudo )+ ;
     type_selector ::= namespace_prefix? element_name ;
  namespace_prefix ::= (IDENT | namespace_star | namespace_empty) "|";
    namespace_star ::= "*" ;
   namespace_empty ::= ;
      element_name ::= IDENT ;
         universal ::= namespace_prefix? "*" ;
             _hash ::= HASH ;
             class ::= "." IDENT ;
            attrib ::= "[" Sp? IDENT Sp? ( ( _eq | _includes | _dashmatch ) Sp? ( IDENT | STRING ) Sp? )? "]" ;
               _eq ::= "=" ;
         _includes ::= INCLUDES ;
        _dashmatch ::= DASHMATCH ;
            pseudo ::= ":" ( _pseudo1 | _pseudo2 ) ;
          _pseudo1 ::= IDENT ;
          _pseudo2 ::= IDENT "(" Sp? (IDENT Sp?)? ")" ;

ssass_declaration_ ::= ruleset | nested_property_ | include_ | declaration ;
  nested_property_ ::= property Sp? ":" Sp "{" Sp? ssass_declaration_? ( ";" Sp? ssass_declaration_? )* "}" Sp? ;
        reference_ ::= "$" IDENT ;
          include_ ::= "@include" Sp? (_ident | function);

       declaration ::= property Sp? ":" Sp expr prio? ;
          property ::= IDENT ;
              prio ::= IMPORTANT_SYM Sp? ;
              expr ::= term ( operator? term )* ;
          operator ::= _slash | _comma ;
            _slash ::= "/" Sp? ;
            _comma ::= "," Sp? ;
              term ::= _term1 | _term2 ;
            _term1 ::= unary_operator? ( _number Sp? | _percentage Sp? | _length Sp? | _ems Sp? | _exs Sp? | _angle Sp? | _time Sp? | _freq Sp? | reference_ Sp? );
    unary_operator ::= _unary_minus | _unary_plus ;
       _unary_plus ::= "+" ;
      _unary_minus ::= "-" ;
            _term2 ::= _string Sp? | _ident Sp? | _uri Sp? | _resolution Sp? | hexcolor | function ;
           _number ::= NUMBER ;
       _percentage ::= PERCENTAGE ;
           _length ::= LENGTH ;
              _ems ::= EMS ;
              _exs ::= EXS ;
            _angle ::= ANGLE ;
             _time ::= TIME ;
             _freq ::= FREQ ;
           _string ::= STRING ;
            _ident ::= IDENT ;
              _uri ::= URI ;
       _resolution ::= RESOLUTION ;
          hexcolor ::= HASH Sp? ;
          function ::= IDENT "(" Sp? expr ")" Sp? ;

[SCANNER]
    white = comment ;

             Sp ::= s+;
            CDO ::= "<!--";
            CDC ::= "-->";
       INCLUDES ::= "~=";
      DASHMATCH ::= "|=";
         STRING ::= string;
          IDENT ::= ident;
           HASH ::= "#" name;

  IMPORTANT_SYM ::= "!" (w | comment)* "important" ;
            EMS ::= num "em";
            EXS ::= num "ex";
         LENGTH ::= num ("px" | "cm" | "mm" | "in" | "pt" | "pc");
          ANGLE ::= num ("deg" | "rad" | "grad");
           TIME ::= num ("ms" | "s");
           FREQ ::= num ("hz" | "khz");
     PERCENTAGE ::= num "%";
     RESOLUTION ::= num ("dpi" | "dpcm");
         NUMBER ::= num;

            URI ::= "url(" w string w ")";
            URI ::= "url(" w url w ")";

              h ::= 'A'..'Z' | 'a'..'z' | '0' .. '9' ;
       nonascii ::= (160 .. 255);
        unicode ::= '\\' h h? h? h? h? h? ('\r' '\n' | ' ' | '\t' | '\r' | '\n' | '\f' )? ;
         escape ::= unicode | '\\' ('\r' | '\n' | '\f' | '0'..'9' | 'A'..'F' | 'a'..'f')! ;
        nmstart ::= ('_' | 'A' .. 'Z' | 'a'..'z' | nonascii | escape );
         nmchar ::= ('_' | 'A' .. 'Z' | 'a'..'z' | '0'..'9' | '-' | nonascii | escape );
        comment ::= '/' '*' '*'!* '*'+ (('/' | '*')! '*'!* '*'+)* '/' s*;
                          # tailing s* because the parser skips comments, and thus leading and tailing blanks cannot be merged
          ident ::= '-'? nmstart nmchar* ;
           name ::= nmchar+ ;
            num ::= ('0'..'9')+ | ('0'..'9')* '.' ('0'..'9')+;
         string ::= string1 | string2 ;
        string1 ::= '"' (('\n' | '\r' | '\f' | '"')! | '\\' nl | escape)* '"';
        string2 ::= '\'' (('\n' | '\r' | '\f' | '\'')! | '\\' nl | escape)* '\'';

            url ::= ("!" | "#" | "$" | "%" | "&" | '*'..'~' | nonascii | escape )*;

              s ::= (' ' | '\t' | '\r' | '\n' | '\f')+ ;
              w ::= s? ;
             nl ::= '\n' | '\r' '\n' | '\r' | '\f' ;
