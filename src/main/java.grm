#
# Copyright 1&1 Internet AG, http://www.1and1.org
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


/** css 2.1 grammar from http://www.w3.org/TR/CSS2/grammar.html */

[PARSER]

stylesheet ::= ( CHARSET_SYM STRING ";" )? (S|CDO|CDC)* ( import ( CDO S* | CDC S* )* )*
               ( ( ruleset | media | page ) ( CDO S* | CDC S* )* )* ;
import ::= IMPORT_SYM S* (STRING|URI) S* media_list? ";" S* ;
media ::= MEDIA_SYM S* media_list "{" S* ruleset* "}" S* ;
media_list ::= medium ( COMMA S* medium)* ;
medium ::= IDENT S* ;
page ::= PAGE_SYM S* pseudo_page? "{" S* declaration? ( ";" S* declaration? )* "}" S* ;
pseudo_page ::= ":" IDENT S* ;
operator ::= "/" S* | "," S* ;
combinator ::= "+" S* | ">" S* ;
unary_operator ::= "-" | "+" ;
property ::= IDENT S* ;
ruleset ::= selector ( "," S* selector )* "{" S* declaration? ( ";" S* declaration? )* "}" S* ;
selector ::= simple_selector ( combinator selector | S+ ( combinator? selector )? )? ;
simple_selector ::= element_name ( HASH | class | attrib | pseudo )*
  | ( HASH | class | attrib | pseudo )+
  ;
class ::= "." IDENT ;
element_name ::= IDENT | "*" ;
attrib ::= "(" S* IDENT S* ( ( "=" | INCLUDES | DASHMATCH ) S* ( IDENT | STRING ) S* )? ")" ;
pseudo ::= ":" ( IDENT | FUNCTION S* (IDENT S*)? ")" ) ;
declaration ::= property ":" S* expr prio? ;
prio        ::= IMPORTANT_SYM S* ;
expr     ::= term ( operator? term )* ;
term     ::= unary_operator? ( NUMBER S* | PERCENTAGE S* | LENGTH S* | EMS S* | EXS S* | ANGLE S* | TIME S* | FREQ S* )
           | STRING S* | IDENT S* | URI S* | hexcolor | function ;
function ::= FUNCTION S* expr ")" S* ;
hexcolor ::= HASH S* ;


[SCANNER]
    white = comment ;

S ::= s;
CDO ::= "<!--";
CDC ::= "-->";
INCLUDES ::= "~=";
DASHMATCH ::= "|=";
STRING ::= string;
BAD_STRING ::= badstring;
IDENT ::= ident;
HASH ::= "#" name;

IMPORT_SYM ::= "@import";
PAGE_SYM ::= "@page";
MEDIA_SYM ::= "@media";
CHARSET_SYM ::= "@charset ";
IMPORTANT_SYM ::= "!" (w | comment)* "important" ;
EMS ::= num "em";
EXS ::= num "ex";
LENGHTH ::= num ("px" | "cm" | "mm" | "in" | "pt" | "pc");
ANGLE ::= num ("deg" | "rad" | "grad");
TIME ::= num ("ms" | "s");
FREQ ::= num ("hz" | "khz");
DIMENSION ::= num ident;
PERDENTACE ::= num "%";
NUMBER ::= num;

URI ::= "url(" w string w ")";
URI ::= "url(" w url w ")";
BAD_URI ::= baduri;
FUNCTION ::= ident "(";

h  ::= 'A'..'Z' | 'a'..'z' | '0' .. '9' ;
nonascii ::= (160 .. 255);
unicode ::= '\\' h h? h? h? h? h? ('\r' '\n' | blank )? ;
blank ::= ' ' | '\t' | '\r' | '\n' | '\f' ;
escape ::= unicode | '\\' ('\r' | '\n' | '\f' | '0'..'9' | 'A'..'F' | 'a'..'f')! ;
nmstart ::= ('_' | 'A' .. 'Z' | 'a'..'z' | nonascii | escape );
nmchar ::= ('_' | 'A' .. 'Z' | 'a'..'z' | '0'..'9' | nonascii | escape );
string1 ::= '"' (('\n' | '\r' | '\f' | '"')! | '\\' nl | escape)* '"';
string2	::= '\'' (('\n' | '\r' | '\f' | '\'')! | '\\' nl | escape)* '\'';
badstring1 ::= '"' (('\n' | '\r' | '\f' | '"')! | '\\' nl | escape)* '\\'?;
badstring1 ::= '\'' (('\n' | '\r' | '\f' | '\'')! | '\\' nl | escape)* '\\'?;
badcomment1 ::= '/' '*' '*'!* '*'+ (('/' | '*')! '*'!* '*'+)* ;
badcomment2 ::= '/' '*' '*'!* ('*'+ ('/' | '*') '*'!*)* ;
baduri1 ::= 'u' 'r' 'l' '(' w ('!' | '#' | '$' | '%' | '&' | '*' | '-' | '[' | ']' | '-' | '~' | nonascii | escape)* w ;
baduri2 ::= 'u' 'r' 'l' '(' w string  w ;
baduri3 ::= 'u' 'r' 'l' '(' w badstring ;
comment ::= '/' '*' '*'!* '*'+ (('/' | '*')! '*'!* '*'+)* '/' ;
ident ::= '-'? nmstart nmchar* ;
name ::= nmchar+ ;
num ::= ('0'..'9')+ | ('0'..'9')* '.' ('0'..'9')+;
string ::= string1 | string2 ;
badstring ::= badstring1 | badstring2 ;
badcomment ::= badcomment1 | badcomment2 ;
baduri ::= baduri1 | baduri2 | baduri3 ;

url	::=	("!" | "#" | "$" | "%" | "&" | "*" | "-" | "~" | nonascii | escape )*;

s ::= (' ' | '\t' | '\r' | '\n' | '\f')+ ;
w ::= s? ;
nl ::= '\n' | '\r' '\n' | '\r' | '\f' ;
